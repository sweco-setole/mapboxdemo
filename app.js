// Generated by CoffeeScript 1.6.1
(function() {

  $(function() {
    var count, drawFeature, labelMap, map, markers, osm, reportedFeature, selectFeature, style, styleContext, toDate, tpl;
    osm = new OpenLayers.Layer.XYZ('mapbox', ["http://a.tiles.mapbox.com/v3/toblen.map-7kkard5p/${z}/${x}/${y}.png", "http://b.tiles.mapbox.com/v3/toblen.map-7kkard5p/${z}/${x}/${y}.png", "http://c.tiles.mapbox.com/v3/toblen.map-7kkard5p/${z}/${x}/${y}.png", "http://d.tiles.mapbox.com/v3/toblen.map-7kkard5p/${z}/${x}/${y}.png"], {
      attribution: "&copy; <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors",
      sphericalMercator: true,
      wrapDateLine: true
    });
    labelMap = {
      complaint: 'Klagom책l',
      analysis: 'Analysresultat',
      c1: 'F채rg',
      c2: 'Lukt',
      c3: 'Smak',
      a1: 'Otj채nligt',
      a2: 'Tj채nligt m. anm'
    };
    map = new OpenLayers.Map({
      div: 'map',
      layers: [osm],
      center: [1480000, 7520000],
      zoom: 9,
      units: 'm',
      controls: [new OpenLayers.Control.Navigation, new OpenLayers.Control.Attribution]
    });
    window.map = map;
    styleContext = {
      getColor: function(feature) {
        var attr;
        attr = feature.attributes;
        if (attr.type === 'temp') {
          return '#66cccc';
        } else if (attr.type === 'complaint') {
          if ($('#vc_all').prop('checked')) {
            return '#c00000';
          } else if ($('#vc1').prop('checked')) {
            return '#ffc000';
          } else if ($('#vc2').prop('checked')) {
            return '#7030a0';
          } else {
            return '#ff33cc';
          }
        } else {
          if ($('#va_all').prop('checked')) {
            return '#c00000';
          } else if ($('#va1').prop('checked')) {
            return '#ffc000';
          } else {
            return '#7030a0';
          }
        }
      },
      getDisplay: function(feature) {
        var attr, attrDate, fromDate, toDate;
        attr = feature.attributes;
        if (attr.type === 'temp') {
          return void 0;
        }
        attrDate = $.datepicker.parseDate('yy-mm-dd', attr.date);
        attrDate.setHours(0, 0, 0);
        fromDate = $('#view-datepicker-from').datepicker().datepicker('getDate');
        fromDate.setHours(0, 0, 0);
        toDate = $('#view-datepicker-to').datepicker().datepicker('getDate');
        toDate.setHours(23, 59, 59);
        if (attrDate < fromDate || attrDate > toDate) {
          return 'none';
        } else if (attr.type === 'complaint') {
          if ($('#vc_all').prop('checked')) {
            return void 0;
          } else if (($('#vc1').prop('checked')) && attr.data['c1']) {
            return void 0;
          } else if (($('#vc2').prop('checked')) && attr.data['c2']) {
            return void 0;
          } else if (($('#vc3').prop('checked')) && attr.data['c3']) {
            return void 0;
          } else {
            return 'none';
          }
        } else {
          if ($('#va_all').prop('checked')) {
            return void 0;
          } else if (($('#va1').prop('checked')) && attr.data['a1']) {
            return void 0;
          } else if (($('#va2').prop('checked')) && attr.data['a2']) {
            return void 0;
          } else {
            return 'none';
          }
        }
      },
      getGraphic: function(feature) {
        var attr;
        attr = feature.attributes;
        if (attr.type === 'analysis') {
          return 'square';
        } else {
          return 'circle';
        }
      }
    };
    tpl = OpenLayers.Util.extend(void 0, OpenLayers.Feature.Vector.style["default"]);
    tpl.fillColor = '${getColor}';
    tpl.display = '${getDisplay}';
    tpl.graphicName = '${getGraphic}';
    tpl.strokeWidth = 0.5;
    tpl.pointRadius = 5;
    tpl.fillOpacity = 0.8;
    tpl.strokeColor = '#000000';
    style = new OpenLayers.Style(tpl, {
      context: styleContext
    });
    markers = new OpenLayers.Layer.Vector('markers', {
      styleMap: new OpenLayers.StyleMap({
        "default": style
      })
    });
    map.addLayer(markers);
    selectFeature = new OpenLayers.Control.SelectFeature(markers);
    map.addControl(selectFeature);
    selectFeature.activate();
    drawFeature = new OpenLayers.Control.DrawFeature(markers, OpenLayers.Handler.Point);
    map.addControl(drawFeature);
    reportedFeature = null;
    count = 0;
    $('#report-datepicker').datepicker();
    $('#view-datepicker-from').datepicker().datepicker('setDate', $.datepicker.parseDate('yy-mm-dd', '2010-01-01'));
    toDate = new Date();
    toDate.setHours(23, 59, 59);
    $('#view-datepicker-to').datepicker().datepicker('setDate', toDate);
    return $('#login').button().click(function() {
      var f, features, popup, _i, _j, _len, _len1, _ref;
      $('#login').fadeOut();
      $('#draw').fadeIn();
      $('#viewpanel').fadeIn();
      popup = null;
      features = [];
      for (_i = 0, _len = svData.length; _i < _len; _i++) {
        f = svData[_i];
        features.push(new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(f.x, f.y), f.attr));
      }
      markers.addFeatures(features);
      _ref = markers.features;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        f = _ref[_j];
        count += 1;
        f.fid = count;
      }
      $('#view-datepicker-from').change(function(e) {
        return markers.redraw();
      });
      $('#view-datepicker-to').change(function(e) {
        return markers.redraw();
      });
      $('input[type=checkbox][name=viewtype]').change(function(e) {
        if ($(this).prop('value') === 'complaint') {
          if ($(this).prop('checked')) {
            $('#view-complaint').find('input[type=radio][name=complainttype]').prop('checked', false);
          }
        } else {
          if ($(this).prop('checked')) {
            $('#view-analysis').find('input[type=radio][name=view-analysistype]').prop('checked', false);
          }
        }
        return markers.redraw();
      });
      $('input[type=radio][name=complainttype]').change(function(e) {
        $('input[type=checkbox][name=viewtype][value=complaint]').prop('checked', false);
        return markers.redraw();
      });
      $('input[type=radio][name=view-analysistype]').change(function(e) {
        $('input[type=checkbox][name=viewtype][value=analysis]').prop('checked', false);
        return markers.redraw();
      });
      $('input[type=radio][name=reporttype]').change(function(e) {
        if ($(this).prop('value') === 'complaint') {
          $('#report-complaint').find('input[type=checkbox]').prop('disabled', '');
          $('#report-complaint').find('label').removeClass('disabled');
          $('#report-analysis').find('input[type=radio][name=analysistype]').prop('disabled', 'disabled');
          $('#report-analysis').find('label').addClass('disabled');
          return $('#report-analysis').find('input[type=radio][name=analysistype]').prop('checked', '');
        } else {
          $('#report-analysis').find('input[type=radio][name=analysistype]').prop('disabled', '');
          $('#report-analysis').find('label').removeClass('disabled');
          $('#report-complaint').find('input[type=checkbox]').prop('disabled', 'disabled');
          $('#report-complaint').find('label').addClass('disabled');
          return $('#report-complaint').find('input[type=checkbox]').prop('checked', '');
        }
      });
      $('#draw').button({
        icons: {
          primary: "ui-icon-pencil"
        }
      }).click(function(e) {
        $(this).button({
          disabled: true
        });
        drawFeature.activate();
        return $('#report-datepicker').datepicker('setDate', new Date);
      });
      $('#save').button({
        icons: {
          primary: "ui-icon-check"
        }
      }).click(function() {
        var attributes, cb, cbs, radio, radios, reportDate, _k, _l, _len2, _len3;
        $('#reportpanel').fadeOut();
        $('#draw').button({
          disabled: false
        });
        attributes = reportedFeature.attributes;
        attributes.type = $('input[type=radio][name=reporttype]:checked').prop('value');
        reportDate = $('#report-datepicker').datepicker('getDate');
        attributes.date = $.datepicker.formatDate('yy-mm-dd', reportDate);
        attributes.data = {};
        if (attributes.type === 'complaint') {
          cbs = $('#report-complaint').find('input[type=checkbox]');
          for (_k = 0, _len2 = cbs.length; _k < _len2; _k++) {
            cb = cbs[_k];
            attributes.data[$(cb).prop('id')] = $(cb).prop('checked');
          }
        } else {
          radios = $('#report-analysis').find('input[type=radio][name=analysistype]');
          for (_l = 0, _len3 = radios.length; _l < _len3; _l++) {
            radio = radios[_l];
            attributes.data[$(radio).prop('id')] = $(radio).prop('checked');
          }
        }
        reportedFeature = null;
        return markers.redraw();
      });
      $('#cancel').button({
        icons: {
          primary: "ui-icon-circle-close"
        }
      }).click(function() {
        $('#reportpanel').fadeOut();
        $('#draw').button({
          disabled: false
        });
        return markers.destroyFeatures([reportedFeature]);
      });
      markers.events.register('beforefeatureadded', null, function(e) {
        var panel;
        panel = $('#reportpanel');
        panel.find('input[type=radio][name=analysistype]').prop('checked', '');
        panel.find('input[type=checkbox]').prop('checked', '');
        panel.fadeIn();
        drawFeature.deactivate();
        count += 1;
        e.feature.fid = count;
        e.feature.attributes.type = 'temp';
        return reportedFeature = e.feature;
      });
      markers.events.register('featureselected', null, function(e) {
        var attr, html, key, value, _ref1;
        if (popup != null) {
          map.removePopup(popup);
        }
        attr = e.feature.attributes;
        html = '<div class="popup">';
        html += '<h3>' + labelMap[attr.type] + ', ' + attr.date + '</h3>';
        _ref1 = attr.data;
        for (key in _ref1) {
          value = _ref1[key];
          html += '<p>';
          if (value) {
            html += '<span class="ui-icon ui-icon-check" style="display:inline-block"></span>';
          } else {
            html += '<span class="ui-icon ui-icon-minus" style="display:inline-block"></span>';
          }
          html += '<span class="result-label">' + labelMap[key] + '</span>';
          html += '</p>';
        }
        popup = new OpenLayers.Popup('featureinfo', new OpenLayers.LonLat(e.feature.geometry.x, e.feature.geometry.y), new OpenLayers.Size(200, 150), html, false);
        return map.addPopup(popup);
      });
      markers.events.register('featureunselected', null, function(e) {
        if (popup != null) {
          return map.removePopup(popup);
        }
      });
      return markers.events.register('beforefeatureselected', null, function(e) {
        if (e.feature.attributes.type === 'temp') {
          return false;
        }
      });
    });
  });

}).call(this);
